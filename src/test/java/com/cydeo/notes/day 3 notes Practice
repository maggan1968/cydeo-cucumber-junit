Today's schedule:
	- Tell me about yourself?
	- Practices
	- TakesScreenShot
	- Parameterization
	- DataTables (introduction)
	- Scenario Outlines (introduction)

------------------------------------------------------------------------------------------

- java
- selenium - automate browser
- maven
	- pom.xml : dependencies, version
- cucumber
	- bdd
- TestNG / JUnit
- POM Design Pattern: web elements repository
- Singleton Design Pattern
	- Driver
- Utilities
	- Driver / Singleton
	- ConfigurationReader : details
		- .properties
	-BrowserUtils
		- commonly used methods
- BDD
	- business team members understanding
	- scenarios in gherkin in feature files
- implementation in step definitions
- project running from Runner class
	- able to manage tags
- configuration.properties
	- browser
	- url

- Hooks
	- annotations before/after/beforestep

- reports html report
	- additional reports
	- screen in the reports
	- scenario outlines

------------------------------------------------------------------------------------------

- vytrack
- intellij
- selenium webdriver
- maven
- cucumber
- jenkins
- pom design
	- seperate java classes
- step_definitions
- feature files : gherkin
- test cases are understandable for scrum team
- utilities
	- Driver
	- other utilities

- Jenkins

- configuration.properties
- configurationReader
- pom.xml

------------------------------------------------------------------------------------------

- tags: or, and, and not
- dryRun :
	 if true : not executing the step definitions
	 if false: executing the step definitions

- glue : where we pass step_definitions path
- feature : where we pass feature files path


- WHat is the triggering point of our framework/project?
	- Runner class.

- How do we decide what kind of report we are generating?
	- plugin : will allow us to decide the type of the report we want to generate

        plugin = "html:target/cucumber-report.html",


        plugin = --> where we decide what kind of report we want to generate

        "html: --> the type of the report

        target/ --> where we want to save our report

        cucumber-report.html", --> the name of the report file that will be auto generated by cucumber


------------------------------------------------------------------------------------------


#1- create feature file, or scenario
#2- generate snippets one of the multiple ways
#3- copy and paste snippets into designated step definition class
#4- implement the logic,
	- create pom page if needed (if you need to use any web element)
	- implement step definitions




pom.xml : project object model
pom design : pabe object model design pattern


- Junit and TestNG assertions are pretty similar except for a few things.

#1- Junit assertions accept the "failure message" as the first argument, where as the TestNG assertion was accepting as last argument

	TestNG : Assert.assertTrue(boolean, "failure message");
	Junit  : Assert.assertTrue("failure message", boolean );

#2- Junit assertions accept the expected value as the first argument, where as the TestNG assertion was accepting it as last argument

	TestNG : Assert.assertEquals(actual, expected, "failure message");
	JUnit : Assert.assertEquals("failure message", expected, actual );



Expected :appleasdfasdf - Google Search
Actual   :apple - Google Search


Expected :apple - Google Search
Actual   :appleasdfasdf - Google Search

------------------------------------------------------------------------------

PARAMETERIZATION: CUCUMBER EXPRESSIONS

	- Cucumber Expressions allows us to pass arguments from feature files
	- We can pass String, int, flot, word
	- We can even create our own object type, and pass it through the feature files

	- We are allowed to pass multiple different types of arguments including some java, and non-java type

	- java types: String, int, float, short, byte, long
	- cucumber type : {word}


------------------------------------------------------------------------------

Taking screenshot

- We use a method that is coming from TakesScreenshot interface.
- Since we are using ChromeDriver, we have to downcast our driver instance to TakesScreenshot interface to be able to use ".getScreenshotAs" method.

- We also have a class name Scenario coming from cucumber-java library.
- Scenario object is following multiple information about the scenario that is currently being executed.
- This can track the following:
	- name of the current scenario
	- condition of the current scenario (pass, or fail)
	- this object can also attach the screenshot into our report

SYNTAX:

		if (scenario.isFailed()){

            byte [] screenshot = ((TakesScreenshot)Driver.getDriver()).getScreenshotAs(OutputType.BYTES);
            scenario.attach(screenshot, "image/png", scenario.getName());

        }

1-> scenario.isFailed() :
	- if scenario fails this will return TRUE.


2- byte [] screenshot = We are creating an array of bytes to be able to store our screenshot
3- ((TakesScreenshot)Driver.getDriver()) ---> we are downcasting our driver type to TakesScreenshot
4- .getScreenshotAs(OutputType.BYTES); ---> we are returning the screenshot as byte so we can use

5- scenario.attach() --> this method is able to attach the screenshot into our report
	- it accepts 3 arguments

	arg1 : array of bytes --> byte [] screenshot :
	arg2 : String image type -->  "image/png"
	arg3 : String scenario name --> scenario.getName()

How do you take screenshot in framework?
	- I use Scenario class to get certain information from current scenario such as name, and condition
	- I downcast my driver type to TakesScreenshot interface and use method getScreenshotAs to store my screenshot as array of bytes
	- And attach my screenshot into report using scenario class object and attach method.


--------------------------------------------------------------------------------

CUCUMBER DATA TABLES
	- What if you want to be able to pass multiple data under ONE STEP?
	- This is where data tables comes in.

	- Data tables allows us to pass List, Map, List of Map, Map of Map and all kinds of different collections as argument in our step definition.
	- We will accept the data we provide in pipes inside feature file, and decide what type of argument we want to accept it as in step_definitions class


syntax:

	Scenario: List of fruits I like
    Then user should see fruits I like
      | kiwi        |
      | banana      |
      | cucumber    |
      | orange      |
      | mango       |
      | grape       |
      | pomegranate |


 	@Then("user should see fruits I like")
    public void user_should_see_fruits_i_like(List<String> fruits) {

        System.out.println(fruits);
        System.out.println(fruits.get(1));

    }


--------------------------------------------------------------------------------


SCENARIO OUTLINES/TEMPLATE:

	- Using Scenario Outlines we can create a table of test data
	- This table will be applying to the whole scenario rather than just one step

	- We can do DDT (Data Driven Testing) using Parameterization from Cucumber. But when we need to pass different test data, we stil have to manually change the data from the Scenario in  feature file.

	- Using Scenario Outlines, we provide the data as a table, and we don't have to interrupt manually to execute different data.






